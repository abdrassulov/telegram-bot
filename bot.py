import os
import json
import logging
from fastapi import FastAPI, Request
import uvicorn
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler,
    CommandHandler, filters
)
import gspread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GSPREAD_JSON = os.getenv("GSPREAD_JSON")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # https://your-service.onrender.com

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
service_account_info = json.loads(GSPREAD_JSON)
gc = gspread.service_account_from_dict(service_account_info)

SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1Pjw1XZgeTGplzm5eJxKkExA4q5YvJjTD4wdptbn7tY8/edit#gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
worksheet = spreadsheet.get_worksheet(0)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# FastAPI
app = FastAPI()

# Telegram Application
app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()


# –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
def find_row_by_order(order_number):
    data = worksheet.get_all_values()
    headers = data[0]
    for row in data[1:]:
        if row[0].strip() == str(order_number).strip():
            result = []
            for i in range(len(headers)):
                if i < len(row):
                    result.append(f"{headers[i]}: {row[i]}")
            return "\n".join(result)
    return "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_number = update.message.text
    response = find_row_by_order(order_number)
    await update.message.reply_text(response)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


@app.on_event("startup")
async def on_startup():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await app_telegram.initialize()
    await app_telegram.bot.delete_webhook(drop_pending_updates=True)
    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    await app_telegram.bot.set_webhook(url=webhook_url)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")


@app.on_event("shutdown")
async def on_shutdown():
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    await app_telegram.bot.delete_webhook()
    await app_telegram.shutdown()


@app.post("/webhook")
async def telegram_webhook(req: Request):
    body = await req.body()
    update = Update.de_json(json.loads(body), app_telegram.bot)
    await app_telegram.process_update(update)
    return {"ok": True}


@app.get("/")
def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}

import os
import json
import logging
import asyncio
from fastapi import FastAPI
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import gspread
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
GSPREAD_JSON = os.getenv("GSPREAD_JSON")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
service_account_info = json.loads(GSPREAD_JSON)
gc = gspread.service_account_from_dict(service_account_info)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1Pjw1XZgeTGplzm5eJxKkExA4q5YvJjTD4wdptbn7tY8/edit#gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
worksheet = spreadsheet.get_worksheet(0)


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–∞—Ä—ã "–∑–∞–≥–æ–ª–æ–≤–æ–∫: –∑–Ω–∞—á–µ–Ω–∏–µ"
def find_order(order_number):
    all_values = worksheet.get_all_values()
    if not all_values or len(all_values) < 2:
        return "‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    headers = all_values[0]
    rows = all_values[1:]

    for row in rows:
        if len(row) > 0 and row[0].strip() == order_number.strip():
            response_lines = []
            for i in range(len(headers)):
                header = headers[i] if i < len(headers) else f"–ö–æ–ª–æ–Ω–∫–∞ {i + 1}"
                value = row[i] if i < len(row) else ""
                response_lines.append(f"{header}: {value}")
            return "\n".join(response_lines)

    return "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    response = find_order(user_message)
    await update.message.reply_text(response)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Application
app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()
app_telegram.add_handler(CommandHandler("start", start_command))
app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()


# Lifespan (–∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞)
@app.on_event("startup")
async def on_startup():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ—Ç...")
    asyncio.create_task(app_telegram.run_polling())


@app.on_event("shutdown")
async def on_shutdown():
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await app_telegram.shutdown()


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/")
def root():
    return {"status": "–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}

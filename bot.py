import os
import logging
import asyncio
import json

from fastapi import FastAPI
from contextlib import asynccontextmanager
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GSPREAD_JSON = os.getenv("GSPREAD_JSON")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(GSPREAD_JSON), scope)
gc = gspread.authorize(credentials)
sheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1Pjw1XZgeTGplzm5eJxKkExA4q5YvJjTD4wdptbn7tY8")
worksheet = sheet.sheet1

# –°–æ–∑–¥–∞—ë–º Telegram Application
app_telegram = ApplicationBuilder().token(BOT_TOKEN).build()


# === HANDLERS ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_number = update.message.text.strip()
    try:
        records = worksheet.get_all_records()
        for row in records:
            if str(row["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"]) == order_number:
                msg = "\n".join([f"{k}: {v}" for k, v in row.items()])
                await update.message.reply_text(f"üßæ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:\n{msg}")
                return
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")


# === –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))


# === FastAPI —Å lifespan ===
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    asyncio.create_task(app_telegram.run_polling())
    yield
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI(lifespan=lifespan)


@app.get("/")
async def root():
    return {"message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"}
